// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NGenericDimensions.CodeGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class T4Unit : T4UnitBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 6 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  if (unit.InheritsSIPrefix || unit.IsMetricBaseUnit) { 
            
            #line default
            #line hidden
            this.Write("using NGenericDimensions.MetricPrefix;\r\n");
            
            #line 8 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } 
            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.ComponentModel;\r\nusing System.Diagnostics.CodeAnalysi" +
                    "s;\r\n\r\nnamespace NGenericDimensions.");
            
            #line 13 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 15 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
/*






The main class for this unit, without a generic metric prefix (but possibly a hardcoded metric prefix).
Examples:
    public class Metres : MetricSILengthUnitOfMeasure, IDefinedUnitOfMeasure
    public class Inches : UscsLengthUnitOfMeasure, IDefinedUnitOfMeasure
    public class Kilometres : Metres<Kilo>
*/
            
            #line default
            #line hidden
            
            #line 28 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  if (unit.InheritsSIPrefix) { 
            
            #line default
            #line hidden
            this.Write("    public class ");
            
            #line 29 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 29 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MetricBaseClassName));
            
            #line default
            #line hidden
            this.Write("<");
            
            #line 29 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.SIPrefix));
            
            #line default
            #line hidden
            this.Write(">\r\n");
            
            #line 30 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } else { 
            
            #line default
            #line hidden
            this.Write("    public class ");
            
            #line 31 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 31 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.UnitGroupName));
            
            #line default
            #line hidden
            
            #line 31 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("UnitOfMeasure, IDefinedUnitOfMeasure\r\n");
            
            #line 32 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } 
            
            #line default
            #line hidden
            this.Write("    {\r\n");
            
            #line 34 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
/* protected override double GetMultiplier(bool stayWithinFamily) */
            
            #line default
            #line hidden
            
            #line 35 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  if (unit.InheritsSIPrefix) { 
            
            #line default
            #line hidden
            
            #line 36 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } else if (unit.FamilyBaseUnit.NameUppercase == unit.SIBaseUnit.NameUppercase) { 
            
            #line default
            #line hidden
            this.Write("        protected override double GetMultiplier(bool stayWithinFamily) => ");
            
            #line 37 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.FamilyMultiplier));
            
            #line default
            #line hidden
            this.Write(";\r\n        \r\n");
            
            #line 39 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } else if (unit.FamilyMultiplier != null && unit.FamilyMultiplier != "1") { 
            
            #line default
            #line hidden
            this.Write("        protected override double GetMultiplier(bool stayWithinFamily) => base.Ge" +
                    "tMultiplier(stayWithinFamily) * ");
            
            #line 40 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.FamilyMultiplier));
            
            #line default
            #line hidden
            this.Write(";\r\n        \r\n");
            
            #line 42 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } else if (unit.FamilyDivisor != null && unit.FamilyDivisor != "1") { 
            
            #line default
            #line hidden
            this.Write("        protected override double GetMultiplier(bool stayWithinFamily) => base.Ge" +
                    "tMultiplier(stayWithinFamily) / ");
            
            #line 43 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.FamilyDivisor));
            
            #line default
            #line hidden
            this.Write(";\r\n        \r\n");
            
            #line 45 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } 
            
            #line default
            #line hidden
            
            #line 46 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
/* public override string UnitSymbol */
            
            #line default
            #line hidden
            
            #line 47 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  if (unit.UnitSymbol != null) { 
            
            #line default
            #line hidden
            this.Write("        public override string UnitSymbol => \"");
            
            #line 48 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.UnitSymbol));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 49 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } 
            
            #line default
            #line hidden
            
            #line 50 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
/* public override string for things like mph */
            
            #line default
            #line hidden
            
            #line 51 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  foreach (var derivedUnit in units.Where(o => o.IsDerivedUnit && !string.IsNullOrEmpty(o.UnitSymbol) && o.NameUppercase.StartsWith(unit.NameUppercase + "Per"))) { 
            
            #line default
            #line hidden
            
            #line 52 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
      var denominatorUnit = units.Single(o => o.NameUppercase == derivedUnit.NameUppercase.Split(new[]{"Per"}, StringSplitOptions.None)[1]); 
            
            #line default
            #line hidden
            this.Write("\r\n        protected override string? DimensionUnitSymbol(IDimension dimension)\r\n " +
                    "       {\r\n            if (dimension == null) return null;\r\n            if (((I");
            
            #line 57 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(derivedUnit.Dimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write(")dimension).");
            
            #line 57 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(denominatorUnit.Dimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("UnitOfMeasure == UnitOfMeasureGlobals<");
            
            #line 57 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(denominatorUnit.FullClassName));
            
            #line default
            #line hidden
            this.Write(">.GlobalInstance)\r\n            {\r\n                return \"");
            
            #line 59 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(derivedUnit.UnitSymbol));
            
            #line default
            #line hidden
            this.Write("\";\r\n            }\r\n            return base.DimensionUnitSymbol(dimension);\r\n     " +
                    "   }\r\n");
            
            #line 63 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } 
            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 65 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
/*






Another class for this unit with the same name but with a generic metric prefix.
Examples:
    public class Metres<T> : MetricSILengthUnitOfMeasure, IDefinedUnitOfMeasure where T : MetricPrefixBase
*/
            
            #line default
            #line hidden
            
            #line 76 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  if (unit.IsMetricBaseUnit) {
            
            #line default
            #line hidden
            this.Write("\r\n    public class ");
            
            #line 78 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write("<T> : ");
            
            #line 78 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.UnitGroupName));
            
            #line default
            #line hidden
            
            #line 78 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("UnitOfMeasure, IDefinedUnitOfMeasure where T : MetricPrefixBase\r\n    {\r\n");
            
            #line 80 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
/* protected override double GetMultiplier(bool stayWithinFamily) */
            
            #line default
            #line hidden
            
            #line 81 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  if (unit.FamilyMultiplier != null && unit.FamilyMultiplier != "1") { 
            
            #line default
            #line hidden
            this.Write("        protected override double GetMultiplier(bool stayWithinFamily) => (double" +
                    ")(");
            
            #line 82 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.FamilyMultiplier));
            
            #line default
            #line hidden
            this.Write(" * UnitOfMeasureGlobals<T>.GlobalInstance.Multiplier);\r\n");
            
            #line 83 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } else if (unit.FamilyMultiplier != null && unit.FamilyMultiplier == "1" && unit.SIMultiplier != "1") { 
            
            #line default
            #line hidden
            this.Write("        protected override double GetMultiplier(bool stayWithinFamily) => (double" +
                    ")UnitOfMeasureGlobals<T>.GlobalInstance.Multiplier * base.GetMultiplier(stayWith" +
                    "inFamily);\r\n");
            
            #line 85 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } else { 
            
            #line default
            #line hidden
            this.Write("        protected override double GetMultiplier(bool stayWithinFamily) => (double" +
                    ")UnitOfMeasureGlobals<T>.GlobalInstance.Multiplier;\r\n");
            
            #line 87 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n        public override string UnitSymbol => MetricPrefix.UnitSymbol + \"");
            
            #line 89 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.UnitSymbol));
            
            #line default
            #line hidden
            this.Write("\";\r\n\r\n        /// <summary>\r\n        /// Returns the simple name of the derived c" +
                    "lass.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public o" +
                    "verride string ToString() => MetricPrefix.ToString() + \"");
            
            #line 95 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralLowercase));
            
            #line default
            #line hidden
            this.Write("\";\r\n\r\n        [EditorBrowsable(EditorBrowsableState.Advanced)]\r\n        public Me" +
                    "tricPrefixBase MetricPrefix => UnitOfMeasureGlobals<T>.GlobalInstance;\r\n    }\r\n");
            
            #line 100 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } 
            
            #line default
            #line hidden
            this.Write("}\r\n\r\nnamespace NGenericDimensions.Extensions\r\n{\r\n    public static class ");
            
            #line 105 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write("ExtensionMethods\r\n    {\r\n        [EditorBrowsable(EditorBrowsableState.Always)]\r\n" +
                    "        public static T ");
            
            #line 108 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write("Value<T>(this ");
            
            #line 108 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("<");
            
            #line 108 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 108 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write(", T> ");
            
            #line 108 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameLowercase));
            
            #line default
            #line hidden
            this.Write(") where T : struct, IComparable, IFormattable, IComparable<T>, IEquatable<T> => ");
            
            #line 108 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameLowercase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 108 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("Value;\r\n        \r\n        [EditorBrowsable(EditorBrowsableState.Always)]\r\n       " +
                    " public static T? ");
            
            #line 111 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write("Value<T>(this ");
            
            #line 111 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("<");
            
            #line 111 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 111 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write(", T>? ");
            
            #line 111 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameLowercase));
            
            #line default
            #line hidden
            this.Write(") where T : struct, IComparable, IFormattable, IComparable<T>, IEquatable<T> => ");
            
            #line 111 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameLowercase));
            
            #line default
            #line hidden
            this.Write("?.");
            
            #line 111 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("Value;\r\n        \r\n");
            
            #line 113 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  if (unit.Dimension.IsUsedExponentiallyInDimensions) { 
            
            #line default
            #line hidden
            this.Write("        [EditorBrowsable(EditorBrowsableState.Always)]\r\n        public static T S" +
                    "quare");
            
            #line 115 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write("Value<T>(this Area<");
            
            #line 115 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 115 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write(", T> area) where T : struct, IComparable, IFormattable, IComparable<T>, IEquatabl" +
                    "e<T> => area.AreaValue;\r\n        \r\n        [EditorBrowsable(EditorBrowsableState" +
                    ".Always)]\r\n        public static T? Square");
            
            #line 118 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write("Value<T>(this Area<");
            
            #line 118 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 118 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write(", T>? area) where T : struct, IComparable, IFormattable, IComparable<T>, IEquatab" +
                    "le<T> => area?.AreaValue;\r\n        \r\n        [EditorBrowsable(EditorBrowsableSta" +
                    "te.Always)]\r\n        public static T Cube");
            
            #line 121 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write("Value<T>(this Volume<");
            
            #line 121 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 121 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write(", T> volume) where T : struct, IComparable, IFormattable, IComparable<T>, IEquata" +
                    "ble<T> => volume.VolumeValue;\r\n        \r\n        [EditorBrowsable(EditorBrowsabl" +
                    "eState.Always)]\r\n        public static T? Cube");
            
            #line 124 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write("Value<T>(this Volume<");
            
            #line 124 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 124 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write(", T>? volume) where T : struct, IComparable, IFormattable, IComparable<T>, IEquat" +
                    "able<T> => volume?.VolumeValue;\r\n        \r\n");
            
            #line 126 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } 
            
            #line default
            #line hidden
            
            #line 127 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  foreach (var dimensionPair in unit.Dimension.DerivedDimensionsFromThisBase.Where(o => o.IsBaseInDenominator && o.DerivedDimension.BaseDimensionsThisDerivedFromInDenominator.Length == 1 && o.DerivedDimension.BaseDimensionsThisDerivedFromInNumerator.Length == 1)) {  
            
            #line default
            #line hidden
            
            #line 128 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
      var numeratorBaseDimension   = dimensionPair.DerivedDimension.BaseDimensionsThisDerivedFromInNumerator[0].BaseDimension; 
            
            #line default
            #line hidden
            
            #line 129 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
      var denominatorBaseDimension = dimensionPair.BaseDimension; 
            
            #line default
            #line hidden
            
            #line 130 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
      var derivedDimension         = dimensionPair.DerivedDimension; 
            
            #line default
            #line hidden
            this.Write("        [SuppressMessage(\"Style\", \"IDE1006:Naming Styles\", Justification = \"In th" +
                    "is case we want it to be lowercase, to appear different than other functions.\")]" +
                    "\r\n        [EditorBrowsable(EditorBrowsableState.Advanced)]\r\n        public stati" +
                    "c ");
            
            #line 133 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(derivedDimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("<TUnitOfMeasure, ");
            
            #line 133 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.FullClassName));
            
            #line default
            #line hidden
            this.Write(", TDataType> ");
            
            #line 133 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NameLowercase));
            
            #line default
            #line hidden
            this.Write("<TUnitOfMeasure, TDataType>(this DimensionPerExtension<");
            
            #line 133 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(numeratorBaseDimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("<TUnitOfMeasure, TDataType>> ");
            
            #line 133 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(numeratorBaseDimension.NameLowercase));
            
            #line default
            #line hidden
            this.Write(")\r\n            where TUnitOfMeasure : ");
            
            #line 134 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(numeratorBaseDimension.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 134 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimensionPair.DerivedDimension.BaseDimensionsThisDerivedFromInNumerator[0].UnitOfMeasureBase.InterfaceName));
            
            #line default
            #line hidden
            this.Write(", IDefinedUnitOfMeasure\r\n            where TDataType : struct, IComparable, IForm" +
                    "attable, IComparable<TDataType>, IEquatable<TDataType> => ");
            
            #line 135 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(numeratorBaseDimension.NameLowercase));
            
            #line default
            #line hidden
            this.Write(".PerValue.");
            
            #line 135 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(numeratorBaseDimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("Value;\r\n        \r\n");
            
            #line 137 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } 
            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n\r\nnamespace NGenericDimensions.Extensions.Numbers\r\n{\r\n    [SuppressMess" +
                    "age(\"Style\", \"IDE1006:Naming Styles\", Justification = \"In this case we want it t" +
                    "o be lowercase, to appear different than other functions.\")]\r\n    public static " +
                    "class ");
            
            #line 144 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralUppercase));
            
            #line default
            #line hidden
            this.Write("NumberExtensionMethods\r\n    {\r\n        [EditorBrowsable(EditorBrowsableState.Adva" +
                    "nced)]\r\n        public static ");
            
            #line 147 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameUppercase));
            
            #line default
            #line hidden
            this.Write("<");
            
            #line 147 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.FullClassName));
            
            #line default
            #line hidden
            this.Write(", T> ");
            
            #line 147 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralLowercase));
            
            #line default
            #line hidden
            this.Write("<T>(this T ");
            
            #line 147 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameLowercase));
            
            #line default
            #line hidden
            this.Write(") where T : struct, IComparable, IFormattable, IComparable<T>, IEquatable<T> => ");
            
            #line 147 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Dimension.NameLowercase));
            
            #line default
            #line hidden
            this.Write(";\r\n        \r\n");
            
            #line 149 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  if (unit.Dimension.IsUsedExponentiallyInDimensions) { 
            
            #line default
            #line hidden
            this.Write("        [EditorBrowsable(EditorBrowsableState.Advanced)]\r\n        public static A" +
                    "rea<");
            
            #line 151 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.FullClassName));
            
            #line default
            #line hidden
            this.Write(", T> ");
            
            #line 151 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralLowercase));
            
            #line default
            #line hidden
            this.Write("<T>(this DimensionSquareExtension<T> area) where T : struct, IComparable, IFormat" +
                    "table, IComparable<T>, IEquatable<T> => area.SquaredValue;\r\n        \r\n        [E" +
                    "ditorBrowsable(EditorBrowsableState.Advanced)]\r\n        public static Volume<");
            
            #line 154 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.FullClassName));
            
            #line default
            #line hidden
            this.Write(", T> ");
            
            #line 154 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.NamePluralLowercase));
            
            #line default
            #line hidden
            this.Write("<T>(this DimensionCubeExtension<T> volume) where T : struct, IComparable, IFormat" +
                    "table, IComparable<T>, IEquatable<T> => volume.CubedValue;\r\n");
            
            #line 155 "H:\Repos\mine\NGenericDimensions\src\CodeGenerator\T4Unit.tt"
  } 
            
            #line default
            #line hidden
            this.Write("    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class T4UnitBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
