<#@ template debug="false" hostspecific="true" language="C#" visibility="internal" encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ Include file="T4Common.tt" #>
<#  foreach (var dimensionUnitOfMeasureBase in DimensionUnitOfMeasureBases) { #>
/*
namespace NGenericDimensions.<#=dimensionUnitOfMeasureBase.Dimension.NamePluralUppercase#>
{
    public abstract class <#=dimensionUnitOfMeasureBase.Dimension.NameUppercase#>UnitOfMeasure : UnitOfMeasure
    {
    }
}
*/
<#
        SaveOutputToSubFolder(dimensionUnitOfMeasureBase.Dimension.NamePluralUppercase, null, dimensionUnitOfMeasureBase.Dimension.NameUppercase + "UnitOfMeasure.cs");
	}
#>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Clear();
}
private void SaveOutputToSubFolder(string folderName, string subFolderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string newDirectoryName = Path.Combine(templateDirectory,folderName);
  if(!Directory.Exists(newDirectoryName))
    Directory.CreateDirectory(newDirectoryName);
  if(subFolderName != null)
  {
    newDirectoryName = Path.Combine(newDirectoryName,subFolderName);
    if(!Directory.Exists(newDirectoryName))
      Directory.CreateDirectory(newDirectoryName);
  }
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Clear();
}
#>